<?php

declare(strict_types=1);

namespace Yiisoft\Db\Oracle\Column;

use Yiisoft\Db\Constant\ColumnType;
use Yiisoft\Db\Constant\ReferentialAction;
use Yiisoft\Db\QueryBuilder\AbstractColumnDefinitionBuilder;
use Yiisoft\Db\Schema\Column\ColumnInterface;

use function ceil;
use function log10;
use function strtoupper;

final class ColumnDefinitionBuilder extends AbstractColumnDefinitionBuilder
{
    protected const AUTO_INCREMENT_KEYWORD = 'GENERATED BY DEFAULT AS IDENTITY';

    protected const TYPES_WITH_SIZE = [
        'char',
        'nchar',
        'character',
        'varchar',
        'varchar2',
        'nvarchar2',
        'number',
        'float',
        'timestamp',
        'interval day(0) to second',
        'raw',
        'urowid',
    ];

    protected const TYPES_WITH_SCALE = [
        'number',
    ];

    public function build(ColumnInterface $column): string
    {
        return $this->buildType($column)
            . $this->buildAutoIncrement($column)
            . $this->buildDefault($column)
            . $this->buildPrimaryKey($column)
            . $this->buildUnique($column)
            . $this->buildNotNull($column)
            . $this->buildCheck($column)
            . $this->buildCollate($column)
            . $this->buildReferences($column)
            . $this->buildExtra($column);
    }

    protected function buildCheck(ColumnInterface $column): string
    {
        $check = $column->getCheck();

        if (empty($check)) {
            $name = $column->getName();

            if (empty($name)) {
                return '';
            }

            return match ($column->getType()) {
                ColumnType::ARRAY, ColumnType::STRUCTURED, ColumnType::JSON =>
                    version_compare($this->queryBuilder->getServerInfo()->getVersion(), '21', '<')
                    ? ' CHECK (' . $this->queryBuilder->getQuoter()->quoteSimpleColumnName($name) . ' IS JSON)'
                    : '',
                ColumnType::BOOLEAN =>
                    ' CHECK (' . $this->queryBuilder->getQuoter()->quoteSimpleColumnName($name) . ' IN (0,1))',
                default => '',
            };
        }

        return " CHECK ($check)";
    }

    protected function buildOnDelete(string $onDelete): string
    {
        return match ($onDelete = strtoupper($onDelete)) {
            ReferentialAction::CASCADE,
            ReferentialAction::SET_NULL => " ON DELETE $onDelete",
            default => '',
        };
    }

    protected function buildOnUpdate(string $onUpdate): string
    {
        return '';
    }

    protected function getDbType(ColumnInterface $column): string
    {
        $dbType = $column->getDbType();
        $size = $column->getSize();
        $scale = $column->getScale();

        /** @psalm-suppress DocblockTypeContradiction */
        return match ($dbType) {
            default => $dbType,
            null => match ($column->getType()) {
                ColumnType::BOOLEAN => 'char(1)',
                ColumnType::BIT => match (true) {
                    $size === null => 'number(38)',
                    $size <= 126 => 'number(' . ceil(log10(2 ** $size)) . ')',
                    default => 'raw(' . ceil($size / 8) . ')',
                },
                ColumnType::TINYINT => 'number(' . ($size ?? 3) . ')',
                ColumnType::SMALLINT => 'number(' . ($size ?? 5) . ')',
                ColumnType::INTEGER => 'number(' . ($size ?? 10) . ')',
                ColumnType::BIGINT => 'number(' . ($size ?? 20) . ')',
                ColumnType::FLOAT => 'binary_float',
                ColumnType::DOUBLE => 'binary_double',
                ColumnType::DECIMAL => 'number(' . ($size ?? 10) . ',' . ($scale ?? 0) . ')',
                ColumnType::MONEY => 'number(' . ($size ?? 19) . ',' . ($scale ?? 4) . ')',
                ColumnType::CHAR => 'char',
                ColumnType::STRING => 'varchar2(' . ($size ?? 255) . ')',
                ColumnType::TEXT => 'clob',
                ColumnType::BINARY => 'blob',
                ColumnType::UUID => 'raw(16)',
                ColumnType::TIMESTAMP => 'timestamp',
                ColumnType::DATETIME => 'timestamp',
                ColumnType::DATETIMETZ => 'timestamp' . ($size !== null ? "($size)" : '') . ' with time zone',
                ColumnType::TIME => 'interval day(0) to second',
                ColumnType::TIMETZ => 'interval day(0) to second',
                ColumnType::DATE => 'date',
                ColumnType::ARRAY, ColumnType::STRUCTURED, ColumnType::JSON =>
                    version_compare($this->queryBuilder->getServerInfo()->getVersion(), '21', '>=')
                    ? 'json'
                    : 'clob',
                default => 'varchar2',
            },
            'timestamp with time zone' => 'timestamp' . ($size !== null ? "($size)" : '') . ' with time zone',
            'timestamp with local time zone' => 'timestamp' . ($size !== null ? "($size)" : '') . ' with local time zone',
            'interval day to second' => 'interval day' . ($scale !== null ? "($scale)" : '') . ' to second' . ($size !== null ? "($size)" : ''),
            'interval year to month' => 'interval year' . ($scale !== null ? "($scale)" : '') . ' to month',
        };
    }

    protected function getDefaultUuidExpression(): string
    {
        return 'sys_guid()';
    }
}
